package cn.junyun.mall.activity.order;

import java.util.ArrayList;
import java.util.List;

import org.xutils.x;
import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.Event;
import org.xutils.view.annotation.ViewInject;

import cn.junyun.mall.R;
import cn.junyun.mall.base.BaseActivity;
import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
/**
 * 我的订单
 * @author Administrator
 * @date 2016年8月8日
 */

@ContentView(R.layout.activity_my_order)
public class MyOrderActivity extends BaseActivity {

	@ViewInject(R.id.btnHeaderBack)
	private Button mBackBt; //我的订单--->返回箭头
	@ViewInject (R.id.back_tv)
	private TextView mBackTv;//我的订单--->顶部“我的订单”标题

	@ViewInject(R.id.tv_all)
	private TextView mAllTv; //全部
	@ViewInject(R.id.tv_wait_pay_money)
	private TextView mWaitPayMonryTv; //待付款
	@ViewInject(R.id.tv_wait_send_goods)
	private TextView mWaitSendGoodsTv; //待发货
	@ViewInject(R.id.tv_wait_receive_goods)
	private TextView mWaitReceiveGoodsTv; //待收货
	@ViewInject(R.id.tv_wait_comment)
	private TextView mWaitCommentTv; //待评价

	private FragmentManager mFragmentManager;
	private MyOrderAllFragment myOrderAllFragment; //我的订单--全部
	private MyOrderWaitPayMoneyFragment myOrderWaitPayMoneyFragment; //我的订单--待付款
	private MyOrderWaitSendGoodsFragment myOrderWaitSendGoodsFragment; //我的订单--待发货
	private MyOrderWaitReceivsGoodsFragment myOrderWaitReceivsGoodsFragment; //我的订单--待收货
	private MyOrderWaitCommentFragment myOrderWaitCommentFragment;  //我的订单--待评价

	private ArrayList<TextView> mTvArrays = new ArrayList<TextView>(); //存放 五个TextView的集合
	/**
	 * 将已经初始化的"五个"TextView添加到mTvArrays集合
	 */
	
	@Override
	protected void fillView() {
		super.fillView();
		mBackTv.setText(getResources().getString(R.string.str_tv_mymall_myorder));//设置成我的订单标题
		mBackBt.setVisibility(View.VISIBLE);//返回箭头可见
		mBackBt.setBackgroundResource(R.drawable.back);//设置返回箭头图片
		
		
		mAllTv.setTextColor(getResources().getColor(R.color.text_check));
		mTvArrays.add(mAllTv);
		mTvArrays.add(mWaitPayMonryTv);
		mTvArrays.add(mWaitSendGoodsTv);
		mTvArrays.add(mWaitReceiveGoodsTv);
		mTvArrays.add(mWaitCommentTv);
		mFragmentManager = getSupportFragmentManager(); //加载fragment 没有这行代码程序会崩溃 空指针异常
		
	}


	@Override
	protected void loadData() {
		// TODO Auto-generated method stub
		super.loadData();
		Intent intent = getIntent();
		int position = intent.getIntExtra("myorder_position", 0);
		setTabSelection(position);
			
	}
	/**
	 * 根据索引切换布局
	 * @param mPosition
	 * @date 2016年8月8日
	 */
	private void setTabSelection(int mPosition) {
		// 开启一个Fragment事务
		FragmentTransaction transaction = mFragmentManager.beginTransaction();
		hideFragments(transaction);
		switch (mPosition) {
		case 0:  //全部
			setTextViewChecked(0);
			if(myOrderAllFragment == null){ //如果我的订单--"全部"为空
				myOrderAllFragment = new MyOrderAllFragment(); //创建 "全部界面"
				transaction.add(R.id.fl_order_fragment, myOrderAllFragment); //将创建的"全部"加添到要显示的layout中，并显示
			} else {
				transaction.show(myOrderAllFragment);  //如果"我的订单---全部界面"存在，则直接显示"我的订单---全部界面"
			}
			break;
			
		case 1:  //待付款
			setTextViewChecked(1);
			if(myOrderWaitPayMoneyFragment == null){
				myOrderWaitPayMoneyFragment = new MyOrderWaitPayMoneyFragment();
				transaction.add(R.id.fl_order_fragment, myOrderWaitPayMoneyFragment);
			}else {
				transaction.show(myOrderWaitPayMoneyFragment);
			}
			break;
		case 2:  //待发货
			setTextViewChecked(2);
			if(myOrderWaitSendGoodsFragment == null){
				myOrderWaitSendGoodsFragment = new MyOrderWaitSendGoodsFragment();
				transaction.add(R.id.fl_order_fragment, myOrderWaitSendGoodsFragment);
			}else {
				transaction.show(myOrderWaitSendGoodsFragment);
			}
			break;
		case 3:  //待收货
			setTextViewChecked(3);
			if(myOrderWaitReceivsGoodsFragment == null){
				myOrderWaitReceivsGoodsFragment = new MyOrderWaitReceivsGoodsFragment();
				transaction.add(R.id.fl_order_fragment, myOrderWaitReceivsGoodsFragment);
			}else {
				transaction.show(myOrderWaitReceivsGoodsFragment);
			}
			break;
		case 4:  //待评价
			setTextViewChecked(4);
			if(myOrderWaitCommentFragment == null){
				myOrderWaitCommentFragment = new MyOrderWaitCommentFragment();
				transaction.add(R.id.fl_order_fragment, myOrderWaitCommentFragment);
			}else {
				transaction.show(myOrderWaitCommentFragment);
			}
			break;
		case 5:  //退换货
			setTextViewChecked(5);
			if(myOrderWaitCommentFragment == null){
				//myOrderWaitCommentFragment = new MyOrderWaitCommentFragment();
				//transaction.add(R.id.fl_order_fragment, myOrderWaitCommentFragment);
			}else {
				//transaction.show(myOrderWaitCommentFragment);
			}
			break;

		default:
			break;
		}
		transaction.commit();

	}

	/**
	 * 将所有的Fragment都置为隐藏状态。
	 * @param transaction 用于对Fragment执行操作的事务
	 * //判断页面是否已经创建，如果已经创建，则隐藏页面
	 */
	private void hideFragments(FragmentTransaction transaction) {
		// TODO Auto-generated method stub

		if (myOrderAllFragment != null) {
			transaction.hide(myOrderAllFragment);
		}
		if(myOrderWaitPayMoneyFragment != null){
			transaction.hide(myOrderWaitPayMoneyFragment);
		}
		if(myOrderWaitSendGoodsFragment != null){
			transaction.hide(myOrderWaitSendGoodsFragment);
		}
		if(myOrderWaitReceivsGoodsFragment != null){
			transaction.hide(myOrderWaitReceivsGoodsFragment);
		}
		if(myOrderWaitCommentFragment != null){
			transaction.hide(myOrderWaitCommentFragment);
		}



	}


	/**
	 * 返回"箭头"点击方法
	 * @param view
	 * @date 2016年8月3日
	 */

	@Event(value={R.id.btnHeaderBack,R.id.back_tv},type=View.OnClickListener.class)
	private void mBackBt(View view) {
		finish();
	}

	/**
	 * 我的订单---> 全部 点击方法
	 * @param view
	 * @date 2016年8月4日
	 */
	@Event(R.id.tv_all)
	private void mAllTv(View view){
		//全部
		setTabSelection(0);
		//toast("查看全部");
	}
	/**
	 * 我的订单--->待付款 点击方法
	 * @param view
	 * @date 2016年8月4日
	 */
	@Event(R.id.tv_wait_pay_money)
	private void mWaitPayMonryTv(View view){
		//待付款
		setTabSelection(1);
		//toast("查看待付款");
	}
	/**
	 * 我的订单--->待发货 点击方法
	 * @param view
	 * @date 2016年8月4日
	 */
	@Event(R.id.tv_wait_send_goods)
	private void mWaitSendGoodsTv(View view) {
		//待发货
		setTabSelection(2);
	}
	/**
	 * 我的订单--->待收货 点击方法
	 * @param view
	 * @date 2016年8月4日
	 */
	@Event(R.id.tv_wait_receive_goods)
	private void mWaitReceiveGoodsTv(View view) {
		//待收货
		setTabSelection(3);
	}
	/**
	 * 我的订单--->待评价 点击方法
	 * @param view
	 * @date 2016年8月4日
	 */
	@Event(R.id.tv_wait_comment)
	private void mWaitCommentTv(View view) {
		//待评价
		setTabSelection(4);
	}
	
	

	/**
	 * 设置
	 * 全部，待付款，待发货，待收货，待评价 按钮的颜色显示效果
	 * @param position
	 * @date 2016年8月4日
	 */
	private void setTextViewChecked(int position) {
		if(mTvArrays != null){
			for (int i = 0; i < mTvArrays.size(); i++) {
				if (position == i) {
					mTvArrays.get(i).setTextColor(
							getResources().getColor(R.color.color_e20d11)); //选中为跟底部按钮选中颜色一样的红色
				} else {
					mTvArrays.get(i).setTextColor(
							getResources().getColor(R.color.color_2b2b2b)); //未选中为灰色
				}

			}
		}
	}



}
